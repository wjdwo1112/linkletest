<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ggamakun.linkle.domain.comment.repository.ICommentRepository">

<!-- 특정 게시글의 모든 댓글(댓글+대댓글) 조회 -->
<select id="findByPostId" resultType="com.ggamakun.linkle.domain.comment.dto.CommentDto">
SELECT 
 c.comment_id AS commentId,
 c.post_id AS postId,
 c.parent_comment_id AS parentCommentId,
 c.content AS content,
 c.created_by AS createdBy,
 c.is_deleted AS isDeleted,
 TO_CHAR(c.created_at, 'YYYY-MM-DD HH24:MI:SS') AS createdAt,
 c.like_count AS likeCount,
 c.comment_count AS commentCount,
 m.name AS authorName,
 m.nickname AS authorNickname,
 m.file_id AS profileId,
 f.file_link AS profileUrl
 FROM COMMENTS c
 LEFT JOIN MEMBER m ON c.created_by = m.member_id
 LEFT JOIN FILE_STORAGE f ON f.file_id = m.file_id
 AND f.is_deleted = 'N'
 WHERE c.post_id = #{postId}
 AND (c.is_deleted = 'N' or(c.is_deleted = 'Y' AND c.comment_count > 0))
 ORDER BY NVL(c.parent_comment_id, c.comment_id),c.created_at
</select>

<!-- 댓글 상세 조회 -->
<select id="findById" resultType="com.ggamakun.linkle.domain.comment.dto.CommentDto">
SELECT
 c.comment_id AS commentId,
 c.post_id AS postId,
 c.parent_comment_id AS parentCommentId,
 c.content AS content,
 c.created_by AS createdBy,
 c.is_deleted AS isDeleted,
 TO_CHAR(c.created_at, 'YYYY-MM-DD HH24:MI:SS') AS createdAt,
 c.like_count AS likeCount,
 c.comment_count AS commentCount,
 m.name AS authorName,
 m.nickname AS authorNickname,
 m.file_id AS profileId,
 f.file_link AS profileUrl
 FROM COMMENTS c
 LEFT JOIN MEMBER m ON c.created_by = m.member_id
 LEFT JOIN FILE_STORAGE f ON f.file_id = m.file_id
 AND f.is_deleted = 'N'
 WHERE c.comment_id = #{commentId}
 
 
</select>

<!--  댓글 등록 -->
<insert id="insertComment" parameterType="com.ggamakun.linkle.domain.comment.dto.CreateCommentRequest">
INSERT INTO COMMENTS
(
comment_id, post_id, parent_comment_id, content, created_by, created_at, like_count, comment_count, is_deleted
)
VALUES
(
 SEQ_COMMENTS.NEXTVAL, #{postId}, #{parentCommentId, jdbcType=NUMERIC}, #{content}, #{createdBy}, SYSDATE, 0 , 0 , 'N'
)

</insert>

<!-- 댓글 수정 -->
<update id="updateComment">
UPDATE COMMENTS
SET CONTENT = #{content},
	UPDATED_AT = SYSDATE
WHERE COMMENT_ID = #{commentId}
AND IS_DELETED = 'N' 
</update> 
 
<!-- 댓글 삭제 --> 
<update id="deleteComment">
UPDATE COMMENTS
SET IS_DELETED = 'Y',
	UPDATED_AT = SYSDATE
WHERE COMMENT_ID = #{commentId}
AND IS_DELETED = 'N'
</update>

<!-- 댓글 삭제(대댓글 있을 때) -->
<update id="deleteComments">
UPDATE COMMENTS
SET CONTENT = NULL,
	IS_DELETED = 'Y',
	UPDATED_AT = SYSDATE
WHERE COMMENT_ID = #{commentId}
AND IS_DELETED = 'N'
</update>

<!-- 자식 수 즉시 카운트 -->
<select id="countChildren" parameterType="int" resultType="int">
  SELECT COUNT(1)
    FROM COMMENTS
   WHERE PARENT_COMMENT_ID = #{commentId}
     AND IS_DELETED = 'N'
</select>
 
 <!-- 부모 댓글의 대댓글 갯수 증가 -->
<update id="increaseCommentCount">
UPDATE COMMENTS
SET comment_count = comment_count + 1
WHERE comment_id = #{parentCommentId}
AND is_deleted = 'N'

</update>

<!-- 부모 댓글의 대댓글 갯수 감소 -->
<update id="decreaseCommentCount">
UPDATE COMMENTS
SET COMMENT_COUNT = COMMENT_COUNT - 1
WHERE COMMENT_ID = #{parentCommentId}
AND COMMENT_COUNT > 0
</update>

<!-- 좋아요 증가 -->
<update id="increaseLikeCount">
UPDATE COMMENTS
SET LIKE_COUNT = LIKE_COUNT + 1
WHERE COMMENT_ID = #{commentId}
AND IS_DELETED = 'N'
</update>

<!-- 좋아요 감소 -->
<update id="decreaseLikeCount">
UPDATE COMMENTS
SET LIKE_COUNT = LIKE_COUNT - 1
WHERE COMMENT_ID = #{commentId}
AND IS_DELETED = 'N'
AND LIKE_COUNT > 0
</update>

<!-- 현재 좋아요 조회 -->
<select id="getLikeCount" resultType="int">
SELECT 
LIKE_COUNT 
FROM COMMENTS
WHERE COMMENT_ID = #{commentId}
AND IS_DELETED = 'N'
</select>
</mapper>