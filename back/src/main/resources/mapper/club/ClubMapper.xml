<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ggamakun.linkle.domain.club.repository.IClubRepository">

	<!-- 회원이 가입한 동호회 목록 조회 -->
	<select id="findClubsByMemberId"
		resultType="com.ggamakun.linkle.domain.club.dto.ClubSummary">
		SELECT
			c.club_id AS clubId,
			c.name AS name,
			c.description AS description,
			cm.status AS status,
			cm.role AS role,
			cm.joined_at AS joinedAt,
			f.file_link AS fileLink
		FROM CLUB c
		JOIN CLUB_MEMBER cm ON c.club_id = cm.club_id
		LEFT JOIN FILE_STORAGE f ON c.file_id = f.file_id
			AND f.is_deleted='N'
		WHERE cm.member_id = #{memberId}
			AND c.is_deleted = 'N'
			AND cm.is_deleted = 'N'
			AND cm.status = 'APPROVED'
		ORDER BY cm.joined_at DESC
	</select>

	<!-- 특정 동호회의 회원인지 확인 -->
	<select id="isClubMember" resultType="int">
		SELECT COUNT(*)
		FROM CLUB_MEMBER
		WHERE club_id = #{clubId}
			AND member_id = #{memberId}
			AND status = 'APPROVED'
			AND is_deleted = 'N'
	</select>

	<!-- 특정 동호회에서 회원의 역할 조회 -->
	<select id="getMemberRole" resultType="string">
		SELECT role
		FROM CLUB_MEMBER
		WHERE club_id = #{clubId}
			AND member_id = #{memberId}
			AND status='APPROVED'
			AND is_deleted='N'
	</select>

	<!-- 동호회 생성 -->
    <insert id="insertClub" parameterType="com.ggamakun.linkle.domain.club.dto.CreateClubRequestDto">
        <selectKey keyProperty="clubId" resultType="int" order="BEFORE">
            SELECT SEQ_CLUB.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO CLUB (
            club_id,
            file_id,
            name,
            leader_id,
            description,
            opened_at,
            created_by,
            created_at,
            region,
            max_members,
            category_id,
            is_deleted
        ) VALUES (
            #{clubId},
            #{fileId},
            #{name},
            #{createdBy},
            #{description},
            SYSDATE,
            #{createdBy},
            SYSDATE,
            #{sido} || ' ' || #{sigungu},
            #{maxMembers},
            #{categoryId},
            'N'
        )
    </insert>

    <!-- 동호회 회원 추가 -->
    <insert id="insertClubMember">
        INSERT INTO CLUB_MEMBER (
            club_id,
            member_id,
            role,
            created_by,
            created_at,
            status,
            joined_at,
            is_deleted
        ) VALUES (
            #{clubId},
            #{memberId},
            'LEADER',
            #{memberId},
            SYSDATE,
            'APPROVED',
            SYSDATE,
            'N'
        )
    </insert>

    <!-- 동호회 조회 -->
    <select id="findById" parameterType="int" resultType="com.ggamakun.linkle.domain.club.entity.Club">
        SELECT 
            club_id as clubId,
            file_id as fileId,
            name,
            leader_id as leaderId,
            description,
            opened_at as openedAt,
            closed_at as closedAt,
            created_by as createdBy,
            created_at as createdAt,
            updated_by as updatedBy,
            updated_at as updatedAt,
            region,
            max_members as maxMembers,
            category_id as categoryId,
            is_deleted as isDeleted
        FROM CLUB
        WHERE club_id = #{clubId}
          AND is_deleted = 'N'
    </select>

	<!-- 동호회 승인된 회원 수 조회 -->
	<select id="getApprovedMemberCount" resultType="int">
		SELECT COUNT(*)
		FROM CLUB_MEMBER
		WHERE club_id = #{clubId}
		AND status = 'APPROVED'
		AND is_deleted = 'N'
	</select>

	<!-- 동호회 상세 조회 -->
	<select id="findDetailById"
		resultType="com.ggamakun.linkle.domain.club.dto.ClubDetailDto">
		SELECT
		c.club_id AS clubId,
		c.name AS clubName,
		f.file_id AS fileId,
		f.file_link AS fileLink,
		c.description AS description,
		c.category_id AS categoryId,
		cat.name AS categoryName,
		c.region AS region,
        c.max_members AS maxMembers,
		TO_CHAR(c.opened_at, 'YYYY-MM-DD HH24:MI:SS') AS openedAt
		FROM CLUB c
		LEFT JOIN FILE_STORAGE f on c.file_id = f.file_id
		AND f.is_deleted = 'N'
		LEFT JOIN CATEGORY cat on c.category_id = cat.category_id
		WHERE c.club_id = #{clubId}
		AND c.is_deleted = 'N'
	</select>
	
	<!-- 동호회 수정 -->
    <update id="updateClub">
        UPDATE CLUB
        SET name = #{request.name},
            category_id = #{request.categoryId},
            region = #{request.sido} || ' ' || #{request.sigungu},
            description = #{request.description},
            max_members = #{request.maxMembers},
            file_id = #{request.fileId},
            updated_by = #{request.updatedBy},
            updated_at = SYSDATE
        WHERE club_id = #{clubId}
            AND is_deleted = 'N'
    </update>

    <!-- 동호회 삭제 -->
    <update id="deleteClub">
        UPDATE CLUB
        SET is_deleted = 'Y',
            closed_at = SYSDATE,
            updated_by = #{memberId},
            updated_at = SYSDATE
        WHERE club_id = #{clubId}
            AND is_deleted = 'N'
    </update>
	
	<!-- 동호회 회원 목록 조회 -->
	<select id="findMembersByClubId" resultType="com.ggamakun.linkle.domain.club.dto.ClubMemberDto">
		SELECT
			cm.member_id AS memberId,
			m.name AS name,
			m.nickname AS nickname,
			m.description AS description,
			cm.role AS role,
			cm.status AS status,
			f.file_link AS fileLink,
			TO_CHAR(cm.joined_at, 'YYYY-MM-DD HH24:MI:SS') AS joinedAt
		FROM CLUB_MEMBER cm
		INNER JOIN MEMBER m ON cm.member_id = m.member_id
			AND m.is_deleted = 'N'
		LEFT JOIN FILE_STORAGE f ON m.file_id = f.file_id
			AND f.is_deleted = 'N'
		WHERE cm.club_id = #{clubId}
			AND cm.is_deleted = 'N'
			AND cm.status = 'APPROVED'
		ORDER BY
			CASE cm.role
				WHEN 'LEADER' THEN 1
				WHEN 'MANAGER' THEN 2
				WHEN 'MEMBER' THEN 3
			END,
			cm.joined_at ASC
	</select>
</mapper>